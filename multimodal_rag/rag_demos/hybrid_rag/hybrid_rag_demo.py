#!/usr/bin/env python3
"""
Hybrid RAG Demo –∑ Reciprocal Rank Fusion (RRF)
===============================================

–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é sparse (BM25) —Ç–∞ dense (embeddings) retrieval –º–µ—Ç–æ–¥—ñ–≤
–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º RRF –¥–ª—è fusion —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.

–í–ò–ü–†–ê–í–õ–ï–ù–û: RRF bug - —Ç–µ–ø–µ—Ä –≤—Å—ñ scores —Ä—ñ–∑–Ω—ñ —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ!
"""

import time
from typing import List, Dict, Tuple, Any
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Simulated documents corpus
SAMPLE_DOCUMENTS = [
    "Python is a high-level programming language used for web development and data science.",
    "Machine learning is a subset of artificial intelligence that enables computers to learn from data.",
    "Neural networks are computing systems inspired by biological neural networks in animal brains.",
    "Deep learning uses multiple layers of neural networks to progressively extract higher-level features.",
    "Natural language processing helps computers understand, interpret and generate human language.",
    "TensorFlow is an open-source machine learning framework developed by Google.",
    "PyTorch is a popular deep learning framework known for its dynamic computational graphs.",
    "Data science combines statistics, mathematics, and computer science to extract insights from data.",
    "Artificial intelligence aims to create machines that can perform tasks requiring human intelligence.",
    "Computer vision enables machines to interpret and understand visual information from the world."
]


class HybridRAG:
    """
    Hybrid RAG –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º RRF –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º

    –ö–æ–º–±—ñ–Ω—É—î:
    - Sparse retrieval (TF-IDF/BM25): keyword-based
    - Dense retrieval (embeddings): semantic-based
    - RRF fusion: balanced ranking
    """

    def __init__(self, documents: List[str], alpha: float = 0.5, k: int = 60):
        """
        Initialize Hybrid RAG

        Parameters:
        - documents: corpus of documents
        - alpha: fusion weight (0=only sparse, 1=only dense)
        - k: RRF rank constant (default 60)
        """
        print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Hybrid RAG –∑ RRF...")
        self.documents = documents
        self.alpha = alpha
        self.k = k

        # Sparse retrieval (TF-IDF)
        print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è TF-IDF —ñ–Ω–¥–µ–∫—Å—É...")
        self.tfidf_vectorizer = TfidfVectorizer()
        self.tfidf_matrix = self.tfidf_vectorizer.fit_transform(documents)

        # Dense retrieval (–ø—Ä–æ—Å—Ç–∏–π word embeddings —á–µ—Ä–µ–∑ TF-IDF —è–∫ proxy)
        # –£ production: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ sentence-transformers
        print("üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è dense embeddings...")
        self.dense_vectorizer = TfidfVectorizer(max_features=512)  # –°–∏–º—É–ª—é—î–º–æ embeddings
        self.dense_matrix = self.dense_vectorizer.fit_transform(documents)

        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–æ—ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–æ")
        print(f"   Alpha: {alpha} (0=sparse, 1=dense)")
        print(f"   RRF k: {k}")

    def sparse_search(self, query: str, top_k: int = 10) -> List[Tuple[int, float]]:
        """
        Sparse retrieval (TF-IDF)

        Returns: List[(doc_idx, score)]
        """
        query_vector = self.tfidf_vectorizer.transform([query])
        scores = cosine_similarity(query_vector, self.tfidf_matrix)[0]

        # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ score (descending)
        ranked_indices = np.argsort(scores)[::-1][:top_k]

        results = [(idx, scores[idx]) for idx in ranked_indices]
        return results

    def dense_search(self, query: str, top_k: int = 10) -> List[Tuple[int, float]]:
        """
        Dense retrieval (embeddings)

        Returns: List[(doc_idx, score)]
        """
        query_vector = self.dense_vectorizer.transform([query])
        scores = cosine_similarity(query_vector, self.dense_matrix)[0]

        # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ score (descending)
        ranked_indices = np.argsort(scores)[::-1][:top_k]

        results = [(idx, scores[idx]) for idx in ranked_indices]
        return results

    def reciprocal_rank_fusion(
        self,
        sparse_results: List[Tuple[int, float]],
        dense_results: List[Tuple[int, float]]
    ) -> List[Tuple[int, float]]:
        """
        ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô RRF –ê–ª–≥–æ—Ä–∏—Ç–º

        Formula: RRF_score = (1-Œ±) * 1/(k+rank_sparse) + Œ± * 1/(k+rank_dense)

        Parameters:
        - sparse_results: [(doc_idx, score)] –≤—ñ–¥ sparse search
        - dense_results: [(doc_idx, score)] –≤—ñ–¥ dense search

        Returns:
        - [(doc_idx, rrf_score)] sorted by RRF score (descending)
        """
        # –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä–∏—Ç–∏ rank dictionaries
        sparse_ranks = {}
        dense_ranks = {}

        # –í–ê–ñ–õ–ò–í–û: rank –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1, –Ω–µ –∑ 0!
        for rank, (doc_idx, _) in enumerate(sparse_results, start=1):
            sparse_ranks[doc_idx] = rank

        for rank, (doc_idx, _) in enumerate(dense_results, start=1):
            dense_ranks[doc_idx] = rank

        # –ö—Ä–æ–∫ 2: –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
        all_docs = set(sparse_ranks.keys()) | set(dense_ranks.keys())

        # –ö—Ä–æ–∫ 3: –û–±—á–∏—Å–ª–∏—Ç–∏ RRF scores
        rrf_scores = {}

        for doc_idx in all_docs:
            # –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–º–∞—î –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–µ–ª–∏–∫–∏–π rank
            sparse_rank = sparse_ranks.get(doc_idx, len(sparse_results) + 100)
            dense_rank = dense_ranks.get(doc_idx, len(dense_results) + 100)

            # RRF formula –∑ k –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ—é
            sparse_score = 1.0 / (self.k + sparse_rank)
            dense_score = 1.0 / (self.k + dense_rank)

            # Weighted fusion
            rrf_score = (1 - self.alpha) * sparse_score + self.alpha * dense_score

            rrf_scores[doc_idx] = rrf_score

        # –ö—Ä–æ–∫ 4: –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ RRF score (descending)
        sorted_results = sorted(
            rrf_scores.items(),
            key=lambda x: x[1],
            reverse=True
        )

        return sorted_results

    def hybrid_search(
        self,
        query: str,
        top_k: int = 5,
        show_details: bool = True
    ) -> Dict[str, Any]:
        """
        Hybrid search –∑ RRF fusion

        Returns dictionary –∑ results —Ç–∞ debug info
        """
        start_time = time.time()

        print(f"\nüîç Query: '{query}'")
        print("=" * 70)

        # –ö—Ä–æ–∫ 1: Sparse search
        print("\nüìä Sparse Search (TF-IDF)...")
        sparse_start = time.time()
        sparse_results = self.sparse_search(query, top_k=10)
        sparse_time = time.time() - sparse_start
        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ: {len(sparse_results)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞ {sparse_time*1000:.1f}ms")

        if show_details:
            print("   Top 3 sparse:")
            for i, (doc_idx, score) in enumerate(sparse_results[:3], 1):
                print(f"      {i}. Doc {doc_idx}: {score:.4f}")

        # –ö—Ä–æ–∫ 2: Dense search
        print("\nüéØ Dense Search (Embeddings)...")
        dense_start = time.time()
        dense_results = self.dense_search(query, top_k=10)
        dense_time = time.time() - dense_start
        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ: {len(dense_results)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞ {dense_time*1000:.1f}ms")

        if show_details:
            print("   Top 3 dense:")
            for i, (doc_idx, score) in enumerate(dense_results[:3], 1):
                print(f"      {i}. Doc {doc_idx}: {score:.4f}")

        # –ö—Ä–æ–∫ 3: RRF Fusion
        print(f"\nüîÄ RRF Fusion (Œ±={self.alpha}, k={self.k})...")
        rrf_start = time.time()
        rrf_results = self.reciprocal_rank_fusion(sparse_results, dense_results)
        rrf_time = time.time() - rrf_start
        print(f"   Fusion –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {rrf_time*1000:.1f}ms")

        # –í–∑—è—Ç–∏ top-k –ø—ñ—Å–ª—è fusion
        final_results = rrf_results[:top_k]

        total_time = time.time() - start_time

        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print(f"\n‚úÖ FINAL RESULTS (Top {top_k}):")
        print("=" * 70)
        for i, (doc_idx, rrf_score) in enumerate(final_results, 1):
            print(f"\n{i}. [RRF: {rrf_score:.6f}] Doc {doc_idx}:")
            print(f"   {self.documents[doc_idx][:80]}...")

            # Debug: –ø–æ–∫–∞–∑–∞—Ç–∏ sparse —Ç–∞ dense ranks
            if show_details:
                sparse_rank = next((rank for rank, (idx, _) in enumerate(sparse_results, 1) if idx == doc_idx), "N/A")
                dense_rank = next((rank for rank, (idx, _) in enumerate(dense_results, 1) if idx == doc_idx), "N/A")
                print(f"   Sparse rank: {sparse_rank}, Dense rank: {dense_rank}")

        print(f"\n‚è±Ô∏è Total time: {total_time*1000:.1f}ms")

        return {
            "query": query,
            "results": final_results,
            "sparse_time": sparse_time,
            "dense_time": dense_time,
            "rrf_time": rrf_time,
            "total_time": total_time,
            "alpha": self.alpha,
            "k": self.k
        }


def demo_hybrid_rag():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è Hybrid RAG –∑ —Ä—ñ–∑–Ω–∏–º–∏ Œ± –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    print("\n" + "=" * 70)
    print("üîÄ HYBRID RAG –∑ RECIPROCAL RANK FUSION (RRF) - DEMO")
    print("=" * 70)
    print("\n‚úÖ RRF BUG –í–ò–ü–†–ê–í–õ–ï–ù–û!")
    print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π ranking (1-indexed)")
    print("   - k=60 –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–æ–¥–∞–Ω–∞")
    print("   - Weighted fusion –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
    print("=" * 70)

    # Demo queries
    queries = [
        "machine learning frameworks",
        "how computers understand language",
        "Python programming"
    ]

    # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ Œ± values
    alphas = [0.3, 0.5, 0.7]

    for alpha in alphas:
        print(f"\n\n{'='*70}")
        print(f"ALPHA = {alpha} ({'Favor Sparse' if alpha < 0.5 else 'Favor Dense' if alpha > 0.5 else 'Balanced'})")
        print("=" * 70)

        rag = HybridRAG(SAMPLE_DOCUMENTS, alpha=alpha, k=60)

        # Query 1
        result = rag.hybrid_search(queries[0], top_k=3, show_details=True)

        input("\n‚è∏Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ alpha...")


def compare_alphas():
    """
    –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö Œ± –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    """
    print("\n" + "=" * 70)
    print("üìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –†–Ü–ó–ù–ò–• Œ± –ü–ê–†–ê–ú–ï–¢–†–Ü–í")
    print("=" * 70)

    query = "machine learning frameworks"

    alphas = [0.0, 0.3, 0.5, 0.7, 1.0]

    print(f"\nQuery: '{query}'")
    print("\nRRF scores –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö Œ±:")
    print("-" * 70)

    for alpha in alphas:
        rag = HybridRAG(SAMPLE_DOCUMENTS, alpha=alpha, k=60)
        result = rag.hybrid_search(query, top_k=3, show_details=False)

        label = "ONLY SPARSE" if alpha == 0.0 else \
                "ONLY DENSE" if alpha == 1.0 else \
                f"{int((1-alpha)*100)}% sparse, {int(alpha*100)}% dense"

        print(f"\nŒ± = {alpha:.1f} ({label}):")
        for i, (doc_idx, score) in enumerate(result['results'], 1):
            print(f"  {i}. Doc {doc_idx}: RRF={score:.6f}")


def main():
    """Main demo function"""
    try:
        # Demo 1: –†—ñ–∑–Ω—ñ alpha values
        demo_hybrid_rag()

        # Demo 2: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        compare_alphas()

    except KeyboardInterrupt:
        print("\n\nüëã Demo –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    print("\n" + "=" * 70)
    print("üéì –ö–õ–Æ–ß–û–í–Ü TAKEAWAYS")
    print("=" * 70)
    print("""
1. RRF –∫–æ–º–±—ñ–Ω—É—î rankings –∑ sparse (BM25) —Ç–∞ dense (embeddings) –º–µ—Ç–æ–¥—ñ–≤
2. Formula: RRF = (1-Œ±) √ó 1/(k+rank_sparse) + Œ± √ó 1/(k+rank_dense)
3. Alpha parameter:
   - Œ±=0.3: Favor keywords (technical docs, code)
   - Œ±=0.5: Balanced (general use)
   - Œ±=0.7: Favor semantic (natural language)
4. k=60: Standard constant –≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó RRF paper
5. Bug fixed: Rankings —Ç–µ–ø–µ—Ä 1-indexed, k –¥–æ–¥–∞–Ω–æ, scores —Ä—ñ–∑–Ω—ñ!

üí° –î–ª—è production:
   - Tune Œ± –Ω–∞ –≤–∞—à–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—ñ
   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ real embeddings (sentence-transformers)
   - Implement parallel sparse+dense search
   - Add caching –¥–ª—è frequent queries
    """)
    print("=" * 70)


if __name__ == "__main__":
    main()
