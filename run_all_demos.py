"""
–ì–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö RAG –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π
"""
import sys
import subprocess
from pathlib import Path
import time


def print_header(title: str):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70 + "\n")


def run_demo(script_path: str, demo_name: str) -> bool:
    """
    –ó–∞–ø—É—Å–∫–∞—î –æ–∫—Ä–µ–º—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é

    Args:
        script_path: –®–ª—è—Ö –¥–æ —Å–∫—Ä–∏–ø—Ç—É
        demo_name: –ù–∞–∑–≤–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó

    Returns:
        bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
    """
    print_header(f"üöÄ –ó–∞–ø—É—Å–∫: {demo_name}")

    try:
        start_time = time.time()
        result = subprocess.run(
            [sys.executable, script_path],
            capture_output=True,
            text=True,
            timeout=300  # 5 —Ö–≤–∏–ª–∏–Ω timeout
        )

        execution_time = time.time() - start_time

        if result.returncode == 0:
            print(result.stdout)
            print(f"\n‚úÖ {demo_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞ {execution_time:.2f}—Å")
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {demo_name}:")
            print(result.stderr)
            return False

    except subprocess.TimeoutExpired:
        print(f"‚è±Ô∏è  Timeout: {demo_name} –ø–µ—Ä–µ–≤–∏—â–∏–≤ –ª—ñ–º—ñ—Ç —á–∞—Å—É (5 —Ö–≤)")
        return False
    except Exception as e:
        print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É {demo_name}: {str(e)}")
        return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_header("üéØ RAG –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–á - –ó–ê–ü–£–°–ö –í–°–Ü–• –ü–†–û–ì–†–ê–ú")

    # –°–ø–∏—Å–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π
    demos = [
        {
            "name": "Naive RAG",
            "script": "naive_rag/naive_rag_demo.py",
            "description": "–ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è RAG (~25% —Ç–æ—á–Ω—ñ—Å—Ç—å)"
        },
        {
            "name": "Advanced RAG",
            "script": "advanced_rag/advanced_rag_demo.py",
            "description": "–ü–æ–∫—Ä–∞—â–µ–Ω–∞ RAG –∑ 5 —Ç–µ—Ö–Ω—ñ–∫–∞–º–∏ (~90% —Ç–æ—á–Ω—ñ—Å—Ç—å)"
        },
        {
            "name": "Hybrid RAG",
            "script": "hybrid_rag/hybrid_rag_demo.py",
            "description": "–ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø–æ—à—É–∫ (Dense + Sparse)"
        },
        {
            "name": "Corrective RAG",
            "script": "corrective_rag/corrective_rag_demo.py",
            "description": "RAG –∑ —Å–∞–º–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º"
        }
    ]

    results = []
    total_start = time.time()

    # –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω–æ—ó –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    for i, demo in enumerate(demos, 1):
        print(f"\n{'='*70}")
        print(f"üìç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è {i}/{len(demos)}: {demo['name']}")
        print(f"üìù {demo['description']}")
        print(f"{'='*70}")

        success = run_demo(demo['script'], demo['name'])
        results.append({
            "name": demo['name'],
            "success": success
        })

        # –ü–∞—É–∑–∞ –º—ñ–∂ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è–º–∏
        if i < len(demos):
            print("\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—î—é...")
            time.sleep(3)

    total_time = time.time() - total_start

    # –ü—ñ–¥—Å—É–º–æ–∫
    print_header("üìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ö–û–ù–ê–ù–ù–Ø")

    print("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    successful = 0
    for result in results:
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"  {status} {result['name']}")
        if result["success"]:
            successful += 1

    print(f"\n–£—Å–ø—ñ—à–Ω–æ: {successful}/{len(demos)}")
    print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.2f}—Å")

    # –†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤:")
    results_dir = Path("results")
    if results_dir.exists():
        for result_file in results_dir.glob("*.json"):
            print(f"  - {result_file}")

    if successful == len(demos):
        print("\nüéâ –í—Å—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("  1. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó results/")
        print("  2. –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤")
        print("  3. –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        print("  4. –î–æ–¥–∞–π—Ç–µ –≤–ª–∞—Å–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤ data/corporate_docs/")
        return 0
    else:
        print("\n‚ö†Ô∏è  –î–µ—è–∫—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
