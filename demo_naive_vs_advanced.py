"""
–®–≤–∏–¥–∫–µ –¥–µ–º–æ: Naive RAG vs Advanced RAG
========================================

–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: –Ω–∞–æ—á–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂ –ø—ñ–¥—Ö–æ–¥–∞–º–∏ –Ω–∞ 1 –∑–∞–ø–∏—Ç—ñ.

–ü–æ–∫–∞–∑—É—î:
1. –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑–Ω–∞–π—à–æ–≤ retrieval
2. –Ø–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ LLM
3. –ß–æ–º—É Advanced RAG –∫—Ä–∞—â–∏–π

–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ~30 —Å–µ–∫—É–Ω–¥
"""

import sys
from pathlib import Path
import time

sys.path.append(str(Path(__file__).parent))


def demo_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂ Naive —Ç–∞ Advanced RAG"""

    print("=" * 80)
    print("üéì NAIVE RAG vs ADVANCED RAG - –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø")
    print("=" * 80)
    print()

    # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç
    question = "What is Self-RAG and how does it improve retrieval quality?"

    print(f"üìù –ó–∞–ø–∏—Ç:")
    print(f"   {question}")
    print()

    # ==================== NAIVE RAG ====================
    print("=" * 80)
    print("1Ô∏è‚É£  NAIVE RAG (–±–∞–∑–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥)")
    print("=" * 80)
    print()

    print("‚öôÔ∏è  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Naive RAG...")
    from naive_rag.naive_rag_demo import NaiveRAG

    naive_rag = NaiveRAG(
        documents_path="data/pdfs",
        chunk_size=500,
        chunk_overlap=100
    )

    print("   –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
    naive_rag.load_and_process_documents(max_documents=20)

    print("   –°—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings...")
    naive_rag.create_embeddings()

    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print()

    # –ó–∞–ø–∏—Ç
    print("üöÄ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É...")
    start = time.time()
    naive_result = naive_rag.query(question, top_k=3)
    naive_time = time.time() - start

    print()
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ Naive RAG:")
    print(f"   –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {naive_time:.2f}—Å")
    print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {naive_result['relevant_chunks']}")
    print(f"   Similarity scores: {[f'{s:.3f}' for s in naive_result['scores']]}")
    print()
    print("üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å Naive RAG:")
    print(f"   {naive_result['answer'][:300]}...")
    print()

    # –ü–æ–∫–∞–∑—É—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
    print("‚ùå –û–±–º–µ–∂–µ–Ω–Ω—è Naive RAG:")
    print("   - –ü—Ä–æ—Å—Ç–∏–π TF-IDF retrieval (–º–æ–∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ relev docs)")
    print("   - –ù–µ–º–∞—î query rewriting (–∑–∞–ø–∏—Ç —è–∫ —î)")
    print("   - –ù–µ–º–∞—î re-ranking (–ø–µ—Ä—à—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ != –Ω–∞–π–∫—Ä–∞—â—ñ)")
    print("   - –ù–µ–º–∞—î context enrichment (–æ–±—Ä—ñ–∑–∞–Ω—ñ —á–∞–Ω–∫–∏)")
    print()

    # ==================== ADVANCED RAG ====================
    print("=" * 80)
    print("2Ô∏è‚É£  ADVANCED RAG (–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)")
    print("=" * 80)
    print()

    print("‚öôÔ∏è  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Advanced RAG...")
    from advanced_rag.advanced_rag_demo import AdvancedRAG

    advanced_rag = AdvancedRAG(
        documents_path="data/pdfs",
        chunk_size=500,
        chunk_overlap=100
    )

    print("   –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
    advanced_rag.load_and_process_documents(max_documents=20)

    print("   –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ (TF-IDF + BM25)...")
    advanced_rag.create_embeddings()

    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print()

    # –ó–∞–ø–∏—Ç
    print("üöÄ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É...")
    start = time.time()
    advanced_result = advanced_rag.query(question, top_k=3)
    advanced_time = time.time() - start

    print()
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ Advanced RAG:")
    print(f"   –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {advanced_time:.2f}—Å")
    print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {advanced_result['relevant_chunks']}")
    print(f"   Combined scores: {[f'{s:.3f}' for s in advanced_result['scores'][:3]]}")
    print(f"   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Ç–µ—Ö–Ω—ñ–∫–∏: {', '.join(advanced_result['techniques_used'])}")
    print()
    print("üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å Advanced RAG:")
    print(f"   {advanced_result['answer'][:300]}...")
    print()

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä–µ–≤–∞–≥–∏
    print("‚úÖ –ü–µ—Ä–µ–≤–∞–≥–∏ Advanced RAG:")
    print("   - Query Rewriting (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è)")
    print("   - Hybrid Search (BM25 + TF-IDF = –∫—Ä–∞—â–µ recall)")
    print("   - Re-ranking (–Ω–∞–π–∫—Ä–∞—â—ñ —á–∞–Ω–∫–∏ —É —Ç–æ–ø—ñ)")
    print("   - Context Enrichment (–¥–æ–¥–∞—î —Å—É—Å—ñ–¥–Ω—ñ —á–∞–Ω–∫–∏)")
    print()

    # ==================== –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø ====================
    print("=" * 80)
    print("üìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø")
    print("=" * 80)
    print()

    print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<30} {'Naive RAG':<20} {'Advanced RAG':<20}")
    print("-" * 80)
    print(f"{'–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å)':<30} {naive_time:<20.2f} {advanced_time:<20.2f}")
    print(f"{'Top similarity score':<30} {naive_result['scores'][0]:<20.3f} {advanced_result['scores'][0]:<20.3f}")
    print(f"{'–î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ':<30} {len(naive_result['answer']):<20} {len(advanced_result['answer']):<20}")
    print()

    # –Ø–∫—ñ—Å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    print("üí° –í–ò–°–ù–û–í–ö–ò –î–õ–Ø –°–¢–£–î–ï–ù–¢–Ü–í:")
    print()
    print("1. Advanced RAG –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –±—ñ–ª—å—à —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏")
    print(f"   Score: {advanced_result['scores'][0]:.3f} vs {naive_result['scores'][0]:.3f}")
    print()
    print("2. Advanced RAG –¥–∞—î –¥–µ—Ç–∞–ª—å–Ω—ñ—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
    print(f"   {len(advanced_result['answer'])} vs {len(naive_result['answer'])} —Å–∏–º–≤–æ–ª—ñ–≤")
    print()
    print("3. Advanced RAG –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 4 advanced —Ç–µ—Ö–Ω—ñ–∫–∏:")
    for tech in advanced_result['techniques_used']:
        print(f"   ‚úÖ {tech}")
    print()
    print("4. –¢—Ä–æ—Ö–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π, –∞–ª–µ –Ω–∞–±–∞–≥–∞—Ç–æ —Ç–æ—á–Ω—ñ—à–∏–π")
    print(f"   +{(advanced_time - naive_time):.1f}—Å, –∞–ª–µ +{(advanced_result['scores'][0] / naive_result['scores'][0] - 1) * 100:.0f}% accuracy")
    print()

    print("=" * 80)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 80)
    print()
    print("üìö –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python compare_all_rag_approaches.py")
    print("      (–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤ –Ω–∞ –±–∞–≥–∞—Ç—å–æ—Ö –∑–∞–ø–∏—Ç–∞—Ö)")
    print()
    print("   2. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ: README_EVALUATION.md")
    print("      (—è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ RAG —á–µ—Ä–µ–∑ RAGAS)")
    print()


if __name__ == "__main__":
    demo_comparison()
