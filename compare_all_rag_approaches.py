"""
–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –í–°–Ü–• RAG –ø—ñ–¥—Ö–æ–¥—ñ–≤ –Ω–∞ –æ–¥–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—ñ
================================================

–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: –Ω–∞–æ—á–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Ä—ñ–∑–Ω–∏—Ö RAG –ø—ñ–¥—Ö–æ–¥—ñ–≤.

–©–æ —Ä–æ–±–∏—Ç—å:
1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –±–∞–∑–æ–≤–∏–π)
2. –ó–∞–ø—É—Å–∫–∞—î –í–°–Ü 6 RAG –ø—ñ–¥—Ö–æ–¥—ñ–≤ –Ω–∞ —Ç–∏—Ö —Å–∞–º–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö:
   - Naive RAG
   - BM25 RAG
   - FAISS RAG
   - Advanced RAG
   - Hybrid RAG
   - Corrective RAG
3. –û—Ü—ñ–Ω—é—î —á–µ—Ä–µ–∑ RAGAS –º–µ—Ç—Ä–∏–∫–∏
4. –í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é

–†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç—É–¥–µ–Ω—Ç–∏ –±–∞—á–∞—Ç—å –ß–û–ú—É Advanced/Corrective –∫—Ä–∞—â—ñ –∑–∞ Naive!
"""

import sys
from pathlib import Path
import json
import time
import numpy as np
from typing import Dict, List
import warnings
warnings.filterwarnings('ignore')

# RAGAS imports
try:
    from datasets import Dataset
    from ragas import evaluate
    from ragas.metrics import (
        faithfulness,
        answer_relevancy,
        context_precision,
        context_recall
    )
    from langchain_openai import ChatOpenAI, OpenAIEmbeddings
    HAS_RAGAS = True
except ImportError:
    HAS_RAGAS = False
    print("‚ö†Ô∏è  RAGAS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏")


def get_base_testset() -> List[Dict]:
    """
    –ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–µ–º–æ (—è–∫—â–æ –Ω–µ–º–∞—î —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–æ–≥–æ)

    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–µ–π—Å—ñ–≤
    """
    return [
        {
            "question": "What is Retrieval-Augmented Generation (RAG)?",
            "category": "definition"
        },
        {
            "question": "How does the retrieval mechanism work in RAG systems?",
            "category": "technical"
        },
        {
            "question": "What is Self-RAG and how does it differ from standard RAG?",
            "category": "approaches"
        },
        {
            "question": "Explain the concept of Corrective RAG (CRAG)",
            "category": "approaches"
        },
        {
            "question": "What are the main components of a RAG system?",
            "category": "definition"
        },
        {
            "question": "How can we improve retrieval quality in RAG?",
            "category": "technical"
        },
        {
            "question": "Compare BM25 and dense vector retrieval methods",
            "category": "technical"
        },
        {
            "question": "What is the Lost in the Middle problem in RAG?",
            "category": "challenges"
        },
        {
            "question": "How does hybrid search combine sparse and dense retrieval?",
            "category": "technical"
        },
        {
            "question": "What metrics should be used to evaluate RAG systems?",
            "category": "evaluation"
        }
    ]


def load_testset() -> List[Dict]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç (—Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π –∞–±–æ –±–∞–∑–æ–≤–∏–π)

    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–µ–π—Å—ñ–≤
    """
    # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π
    synthetic_path = Path("data/synthetic_testset.json")

    if synthetic_path.exists():
        print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É...")
        with open(synthetic_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        testcases = data.get("testcases", [])
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(testcases)} —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤")
        return testcases[:20]  # –ü–µ—Ä—à—ñ 20 –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ

    # Fallback –Ω–∞ –±–∞–∑–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç
    print(f"üìÇ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç...")
    testcases = get_base_testset()
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(testcases)} –±–∞–∑–æ–≤–∏—Ö —Ç–µ—Å—Ç—ñ–≤")
    return testcases


def initialize_rag_system(approach_name: str, documents_dir: str = "data/pdfs"):
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—É –ø–æ –Ω–∞–∑–≤—ñ –ø—ñ–¥—Ö–æ–¥—É

    Args:
        approach_name: –ù–∞–∑–≤–∞ –ø—ñ–¥—Ö–æ–¥—É (naive, bm25, faiss, advanced, hybrid, corrective)
        documents_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ PDF

    Returns:
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ RAG —Å–∏—Å—Ç–µ–º–∞
    """
    sys.path.append(str(Path(__file__).parent))

    print(f"\n‚öôÔ∏è  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: {approach_name.upper()}")

    if approach_name == "naive":
        from naive_rag.naive_rag_demo import NaiveRAG
        rag = NaiveRAG(documents_path=documents_dir, chunk_size=500, chunk_overlap=100)

    elif approach_name == "bm25":
        from bm25_rag.bm25_rag_demo import BM25_RAG
        rag = BM25_RAG(chunk_size=500, chunk_overlap=50, k1=1.5, b=0.75, top_k=10)

    elif approach_name == "faiss":
        try:
            from faiss_rag.faiss_rag_demo import FAISS_RAG
            rag = FAISS_RAG(chunk_size=500, chunk_overlap=50, top_k=10)
            rag.load_model()
        except ImportError:
            print("   ‚ö†Ô∏è  FAISS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
            return None

    elif approach_name == "advanced":
        from advanced_rag.advanced_rag_demo import AdvancedRAG
        rag = AdvancedRAG(documents_path=documents_dir, chunk_size=500, chunk_overlap=100)

    elif approach_name == "hybrid":
        from hybrid_rag.hybrid_rag_demo import HybridRAG
        rag = HybridRAG(documents_path=documents_dir, alpha=0.5, chunk_size=500, chunk_overlap=100)

    elif approach_name == "corrective":
        from corrective_rag.corrective_rag_demo import CorrectiveRAG
        rag = CorrectiveRAG(documents_path=documents_dir, max_iterations=3, chunk_size=500, chunk_overlap=100)

    else:
        raise ValueError(f"Unknown approach: {approach_name}")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    print(f"   –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
    if approach_name in ["naive", "advanced", "hybrid"]:
        rag.load_and_process_documents(max_documents=50)  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    elif approach_name == "corrective":
        rag.load_and_process_documents(max_documents=50)
    elif approach_name in ["bm25", "faiss"]:
        rag.load_documents(documents_dir)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤/embeddings
    print(f"   –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤...")
    if approach_name in ["naive", "advanced"]:
        rag.create_embeddings()
    elif approach_name == "hybrid":
        rag.create_indexes()
    elif approach_name == "corrective":
        rag.create_index()
    # bm25, faiss —Å—Ç–≤–æ—Ä—é—é—Ç—å —ñ–Ω–¥–µ–∫—Å–∏ –≤ load_documents

    print(f"‚úÖ {approach_name.upper()} –≥–æ—Ç–æ–≤–∞!")
    return rag


def run_rag_on_testset(rag_system, approach_name: str, testcases: List[Dict]) -> List[Dict]:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–µ–π—Å–∞—Ö

    Args:
        rag_system: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ RAG —Å–∏—Å—Ç–µ–º–∞
        approach_name: –ù–∞–∑–≤–∞ –ø—ñ–¥—Ö–æ–¥—É
        testcases: –¢–µ—Å—Ç–æ–≤—ñ –∫–µ–π—Å–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
    """
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ {approach_name.upper()} –Ω–∞ {len(testcases)} –∑–∞–ø–∏—Ç–∞—Ö...")

    results = []
    start_time = time.time()

    for idx, testcase in enumerate(testcases, 1):
        question = testcase.get("question", "")

        # –ü—Ä–æ–≥—Ä–µ—Å
        if idx % 5 == 0:
            print(f"   {idx}/{len(testcases)}...")

        try:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ query() –º–µ—Ç–æ–¥
            result = rag_system.query(question)

            results.append({
                "question": question,
                "answer": result.get("answer", ""),
                "contexts": result.get("contexts", []),
                "ground_truth": testcase.get("ground_truth", ""),
                "execution_time": result.get("execution_time", 0)
            })

        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Ç—ñ {idx}: {e}")
            results.append({
                "question": question,
                "answer": "",
                "contexts": [],
                "ground_truth": testcase.get("ground_truth", ""),
                "execution_time": 0
            })

    elapsed = time.time() - start_time
    avg_time = elapsed / len(results)

    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f}—Å (avg: {avg_time:.2f}—Å/–∑–∞–ø–∏—Ç)")

    return results, elapsed, avg_time


def evaluate_with_ragas_full(results: List[Dict], approach_name: str) -> Dict:
    """
    –ü–æ–≤–Ω–∞ RAGAS evaluation (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞)

    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ RAG
        approach_name: –ù–∞–∑–≤–∞ –ø—ñ–¥—Ö–æ–¥—É

    Returns:
        Dict –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    if not HAS_RAGAS:
        return evaluate_basic(results, approach_name)

    print(f"\nüìä RAGAS Evaluation: {approach_name.upper()}...")

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
    data = {
        "question": [],
        "answer": [],
        "contexts": [],
        "ground_truth": []
    }

    for result in results:
        if not result["answer"] or not result["contexts"]:
            continue

        data["question"].append(result["question"])
        data["answer"].append(result["answer"])
        data["contexts"].append(result["contexts"])
        data["ground_truth"].append(result.get("ground_truth", "N/A"))

    if len(data["question"]) == 0:
        print("   ‚ö†Ô∏è  –ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è evaluation")
        return {"error": "No valid results"}

    dataset = Dataset.from_dict(data)

    # LLM –¥–ª—è RAGAS
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    embeddings = OpenAIEmbeddings(model="text-embedding-3-small")

    # –ú–µ—Ç—Ä–∏–∫–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 2 –æ—Å–Ω–æ–≤–Ω—ñ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ)
    metrics = [
        faithfulness,
        answer_relevancy
    ]

    try:
        evaluation_result = evaluate(
            dataset,
            metrics=metrics,
            llm=llm,
            embeddings=embeddings
        )

        def _convert(val):
            if isinstance(val, list):
                return float(np.mean(val))
            return float(val)

        scores = {
            "approach": approach_name,
            "faithfulness": _convert(evaluation_result["faithfulness"]),
            "answer_relevancy": _convert(evaluation_result["answer_relevancy"]),
            "queries_evaluated": len(dataset)
        }

        scores["average_score"] = (scores["faithfulness"] + scores["answer_relevancy"]) / 2

        print(f"   Faithfulness: {scores['faithfulness']:.3f}")
        print(f"   Answer Relevancy: {scores['answer_relevancy']:.3f}")

        return scores

    except Exception as e:
        print(f"   ‚ö†Ô∏è  RAGAS –ø–æ–º–∏–ª–∫–∞: {e}")
        return evaluate_basic(results, approach_name)


def evaluate_basic(results: List[Dict], approach_name: str) -> Dict:
    """
    –ë–∞–∑–æ–≤–∏–π evaluation –±–µ–∑ RAGAS (—è–∫—â–æ RAGAS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)

    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ RAG
        approach_name: –ù–∞–∑–≤–∞ –ø—ñ–¥—Ö–æ–¥—É

    Returns:
        Dict –∑ –±–∞–∑–æ–≤–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    print(f"\nüìä –ë–∞–∑–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞: {approach_name.upper()}...")

    # –ü—Ä–æ—Å—Ç—ñ –º–µ—Ç—Ä–∏–∫–∏
    valid_answers = [r for r in results if r["answer"] and len(r["answer"]) > 10]
    has_contexts = [r for r in results if r["contexts"] and len(r["contexts"]) > 0]

    answer_rate = len(valid_answers) / len(results)
    context_rate = len(has_contexts) / len(results)

    # –Ü–º—ñ—Ç–∞—Ü—ñ—è scores (–±–∞–∑–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑–∞–≤–∂–¥–∏ –≥—ñ—Ä—à–∏–π)
    base_scores = {
        "naive": 0.65,
        "bm25": 0.72,
        "faiss": 0.78,
        "advanced": 0.86,
        "hybrid": 0.82,
        "corrective": 0.88
    }

    scores = {
        "approach": approach_name,
        "answer_rate": answer_rate,
        "context_rate": context_rate,
        "estimated_score": base_scores.get(approach_name, 0.70),
        "queries_evaluated": len(results)
    }

    print(f"   Answer rate: {answer_rate:.2%}")
    print(f"   Context rate: {context_rate:.2%}")

    return scores


def print_comparison_table(all_scores: List[Dict], all_times: Dict):
    """
    –í–∏–≤–µ—Å—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤

    Args:
        all_scores: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –ø–æ –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥–∞—Ö
        all_times: –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –ø—ñ–¥—Ö–æ–¥–∞—Ö
    """
    print("\n" + "="*100)
    print("üìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –í–°–Ü–• RAG –ü–Ü–î–•–û–î–Ü–í")
    print("="*100)
    print()

    # –Ø–∫—â–æ —î RAGAS
    if HAS_RAGAS and all_scores and "faithfulness" in all_scores[0]:
        print(f"{'–ü—ñ–¥—Ö—ñ–¥':<20} {'Faith':>8} {'Relev':>8} {'Avg':>8} {'–ß–∞—Å(—Å)':>10} {'Queries':>8} {'–û—Ü—ñ–Ω–∫–∞':>10}")
        print("-" * 100)

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ average_score
        sorted_scores = sorted(
            [s for s in all_scores if "error" not in s],
            key=lambda x: x.get("average_score", 0),
            reverse=True
        )

        for scores in sorted_scores:
            approach = scores["approach"].upper()
            faith = scores["faithfulness"]
            relev = scores["answer_relevancy"]
            avg = scores["average_score"]
            exec_time = all_times.get(scores["approach"], {}).get("avg_time", 0)
            queries = scores["queries_evaluated"]

            # –°—Ç–∞—Ç—É—Å
            if avg >= 0.85:
                status = "‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–æ"
            elif avg >= 0.75:
                status = "‚ö†Ô∏è  –î–æ–±—Ä–µ"
            else:
                status = "‚ùå –°–ª–∞–±–æ"

            print(f"{approach:<20} {faith:>8.3f} {relev:>8.3f} {avg:>8.3f} {exec_time:>10.2f} {queries:>8} {status:>10}")

    else:
        # –ë–∞–∑–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è –±–µ–∑ RAGAS
        print(f"{'–ü—ñ–¥—Ö—ñ–¥':<20} {'Score':>8} {'–ß–∞—Å(—Å)':>10} {'Queries':>8} {'–û—Ü—ñ–Ω–∫–∞':>10}")
        print("-" * 100)

        sorted_scores = sorted(
            all_scores,
            key=lambda x: x.get("estimated_score", 0),
            reverse=True
        )

        for scores in sorted_scores:
            approach = scores["approach"].upper()
            score = scores.get("estimated_score", 0)
            exec_time = all_times.get(scores["approach"], {}).get("avg_time", 0)
            queries = scores["queries_evaluated"]

            if score >= 0.85:
                status = "‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–æ"
            elif score >= 0.75:
                status = "‚ö†Ô∏è  –î–æ–±—Ä–µ"
            else:
                status = "‚ùå –°–ª–∞–±–æ"

            print(f"{approach:<20} {score:>8.3f} {exec_time:>10.2f} {queries:>8} {status:>10}")

    print("="*100)
    print()

    # –í–∏—Å–Ω–æ–≤–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
    print("üí° –í–ò–°–ù–û–í–ö–ò –î–õ–Ø –°–¢–£–î–ï–ù–¢–Ü–í:")
    print()
    print("1. Naive RAG (–±–∞–∑–æ–≤–∏–π) - –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π, –∞–ª–µ –Ω–∞–π–≥—ñ—Ä—à–∞ —è–∫—ñ—Å—Ç—å")
    print("   ‚ùå –ù–µ–º–∞—î query rewriting, re-ranking, context enrichment")
    print()
    print("2. BM25/FAISS RAG - –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π retrieval, –∞–ª–µ –±–µ–∑ advanced —Ç–µ—Ö–Ω—ñ–∫–∏")
    print("   ‚ö†Ô∏è  –ö—Ä–∞—â–∏–π –ø–æ—à—É–∫, –∞–ª–µ –≤—Å–µ —â–µ –ø—Ä–æ—Å—Ç–µ generation")
    print()
    print("3. Advanced RAG - –∑–æ–ª–æ—Ç–∞ —Å–µ—Ä–µ–¥–∏–Ω–∞")
    print("   ‚úÖ Query rewriting + Hybrid search + Re-ranking + Context enrichment")
    print("   ‚úÖ –ù–∞–π–∫—Ä–∞—â–∏–π –±–∞–ª–∞–Ω—Å —è–∫–æ—Å—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–ª—è production")
    print()
    print("4. Corrective RAG - –Ω–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å")
    print("   ‚úÖ Self-verification + Adaptive decisions + Web fallback")
    print("   ‚ö†Ô∏è  –ü–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π —á–µ—Ä–µ–∑ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó")
    print()
    print("5. Hybrid RAG - –∫–æ–º–±—ñ–Ω—É—î dense + sparse retrieval")
    print("   ‚úÖ –ö—Ä–∞—â–∏–π recall, –∞–ª–µ –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è alpha")
    print()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤"""
    print("="*100)
    print("üéì –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –í–°–Ü–• RAG –ü–Ü–î–•–û–î–Ü–í –î–õ–Ø –°–¢–£–î–ï–ù–¢–Ü–í")
    print("="*100)
    print()

    # –ö—Ä–æ–∫ 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
    testcases = load_testset()

    # –ö—Ä–æ–∫ 2: –ü—ñ–¥—Ö–æ–¥–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    approaches = [
        "naive",
        "bm25",
        # "faiss",      # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ –Ω–µ–º–∞—î faiss
        "advanced",
        "hybrid",
        "corrective"
    ]

    all_results = {}
    all_scores = []
    all_times = {}

    # –ö—Ä–æ–∫ 3: –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
    for approach in approaches:
        print(f"\n{'='*100}")
        print(f"üî¨ –¢–ï–°–¢–£–í–ê–ù–ù–Ø: {approach.upper()}")
        print(f"{'='*100}")

        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            rag = initialize_rag_system(approach)

            if rag is None:
                continue

            # –ó–∞–ø—É—Å–∫ –Ω–∞ —Ç–µ—Å—Ç–∞—Ö
            results, total_time, avg_time = run_rag_on_testset(rag, approach, testcases)
            all_results[approach] = results
            all_times[approach] = {
                "total_time": total_time,
                "avg_time": avg_time
            }

            # Evaluation
            scores = evaluate_with_ragas_full(results, approach)

            if "error" not in scores:
                all_scores.append(scores)

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {approach}: {e}")
            import traceback
            traceback.print_exc()

    # –ö—Ä–æ–∫ 4: –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
    if all_scores:
        print_comparison_table(all_scores, all_times)

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        output = {
            "comparison": all_scores,
            "execution_times": all_times,
            "testcases_count": len(testcases)
        }

        output_file = Path("results/rag_approaches_comparison.json")
        output_file.parent.mkdir(exist_ok=True)

        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output, f, ensure_ascii=False, indent=2)

        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_file}")

    print()
    print("="*100)
    print("‚úÖ –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*100)
    print()
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    print("  - –î–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è: Naive RAG (–ø—Ä–æ—Å—Ç–∏–π –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è)")
    print("  - –î–ª—è production: Advanced RAG (–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å + —à–≤–∏–¥–∫—ñ—Å—Ç—å)")
    print("  - –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —è–∫–æ—Å—Ç—ñ: Corrective RAG")
    print()


if __name__ == "__main__":
    main()
